#include <CGAL/IO/polygon_soup_io.h>
#include <CGAL/Advancing_front_surface_reconstruction.h>
#include <CGAL/Polygon_mesh_processing/polygon_soup_to_polygon_mesh.h>
#include <CGAL/Timer.h>

#include <cstdlib>
#include <iostream>

#include "../../../Headers/Primitives/PointCloud.h"

Mesh PointCloud::reconstructFront() {

    CGAL::Timer t;
    t.start();
    std::cout << "Reconstruct..." << std::flush;

    typedef std::array<std::size_t, 3> Facet; // Triple of indices

    std::vector<Facet> facets;
    std::vector<Point> points_local;

    for (auto &p : points) {
        points_local.push_back(p.first);
    }

    // The function is called using directly the points raw iterators
    CGAL::advancing_front_surface_reconstruction(points_local.begin(),
                                                 points_local.end(),
                                                 std::back_inserter(facets));

    Mesh triangulated_cloud;

    CGAL::Polygon_mesh_processing::polygon_soup_to_polygon_mesh(points_local, facets, triangulated_cloud);

    t.stop();
    std::cout << "\tDone. Time: " << t.time() << " sec" << std::endl;

    std::cout << facets.size ()
              << " facet(s) generated by reconstruction." << std::endl;



    return triangulated_cloud;
}

Mesh PointCloud::reconstructFront(std::vector<Point>& points) {

    CGAL::Timer t;
    t.start();
    std::cout << "Reconstruct..." << std::flush;

    typedef std::array<std::size_t, 3> Facet; // Triple of indices

    std::vector<Facet> facets;

    // The function is called using directly the points raw iterators
    CGAL::advancing_front_surface_reconstruction(points.begin(),
                                                 points.end(),
                                                 std::back_inserter(facets));

    Mesh triangulated_cloud;

    CGAL::Polygon_mesh_processing::polygon_soup_to_polygon_mesh(points, facets, triangulated_cloud);

    t.stop();
    std::cout << "\tDone. Time: " << t.time() << " sec" << std::endl;

    std::cout << facets.size ()
              << " facet(s) generated by reconstruction." << std::endl;



    return triangulated_cloud;
}
